"""
Created on Mon Dec 27 18:20:18 2021

@author: LnSHa


Project: University Admission Procedure

Stage 5/7: Special knowledge

Description

Taking only student's GPAs into consideration may not be very conclusive. It 
would be better if we could take the results of the finals depending on the 
Department. For example, for a Physics department candidate, we would check 
the physics finals. Try to take the sorting algorithm to the next level. In 
this stage, you need to sort by an exam that suits the particular Department.


File Name: applicant_list.txt

Objectives

At this stage, your program should:

1. Read an N integer. This integer represents the maximum number of students 
   for each department.
2. Read the file named applicants.txt once again. The structure has changed a 
   bit: instead of the GPA column, each line contains four columns with scores 
   for particular exams: 
   physics, chemistry, math, computer science (in this order). For example, 
   John Ritchie 89 45 83 75 Physics Engineering Mathematics.
3. Take into account the following exam results for the departments: physics 
   for the Physics department, chemistry for the Chemistry department, math for 
   the Mathematics department, computer science for the Engineering, and 
   chemistry (again) for the Biotech department..
4. Do the same steps as in the previous stage: perform three stages of 
   admission based on the applicants' priorities. Applicants should be ranked 
   by their exam score and, in case they have the same score, their full name 
   in alphabetic order. There should be no more than N accepted applicants for 
   each department. One student can only be accepted to one department.
5. One thing has changed â€” output the exam result (instead of the GPA) for 
   each student:

department_name
applicant1 exam1
applicant2 exam2
applicant3 exam3
<...>


Examples

The greater-than symbol followed by a space (> ) represents the user input. 
Note that it's not part of the input.

Example 1: 

Below is an example of the input file:

Natha Keefe 71 67 53 60 Engineering Biotech Chemistry
Crescentia Dow 86 94 85 51 Chemistry Physics Mathematics
Randon Bradhust 72 88 85 83 Biotech Engineering Chemistry
Dashawn Bosley 80 79 82 61 Mathematics Chemistry Biotech
Nicolasa Sumpter 75 82 96 81 Engineering Mathematics Biotech
Cressie Gillespie 85 92 82 70 Physics Mathematics Engineering
Tawny Crockett 71 90 80 72 Chemistry Biotech Physics
Kennon Inverarity 71 84 98 71 Mathematics Engineering Chemistry
Halima Brydone 77 85 82 86 Chemistry Physics Mathematics
Esther Bratby 55 76 88 62 Mathematics Chemistry Biotech
Lorry Bunger 75 73 84 97 Engineering Biotech Physics
Fatemah Desavigny 81 71 73 86 Physics Mathematics Engineering
Marti Mclaws 71 71 61 60 Engineering Chemistry Biotech
Estephanie Phelps 80 95 45 71 Chemistry Physics Mathematics
Tommi Peerless 72 81 81 92 Engineering Physics Mathematics
Cynthia Hermitton 70 59 62 88 Engineering Biotech Chemistry
Cheyla Hankinson 75 80 86 88 Engineering Mathematics Biotech
Giovanna Keel 84 71 76 80 Physics Mathematics Engineering
Narissa Worthington 52 71 80 73 Biotech Chemistry Mathematics
Aundria Guthrie 61 81 94 71 Mathematics Chemistry Engineering
Teneil Maclean 85 63 84 45 Mathematics Physics Chemistry
Shealynn Melville 74 76 88 62 Mathematics Chemistry Physics
Darrah Smyth 75 73 84 97 Physics Biotech Engineering

An example of the output:

> 5
Biotech
Randon Bradhust 88.0
Marti Mclaws 71.0
Narissa Worthington 71.0
Natha Keefe 67.0

Chemistry
Estephanie Phelps 95.0
Crescentia Dow 94.0
Tawny Crockett 90.0
Halima Brydone 85.0
Dashawn Bosley 79.0

Engineering
Lorry Bunger 97.0
Tommi Peerless 92.0
Cheyla Hankinson 88.0
Cynthia Hermitton 88.0
Nicolasa Sumpter 81.0

Mathematics
Kennon Inverarity 98.0
Aundria Guthrie 94.0
Esther Bratby 88.0
Shealynn Melville 88.0
Teneil Maclean 84.0

Physics
Cressie Gillespie 85.0
Giovanna Keel 84.0
Fatemah Desavigny 81.0
Darrah Smyth 75.0

"""
# Published solution
with open('applicants.txt', 'r', encoding='utf-8') as f:
    for line in f:
        app_list.append(line.strip().split())

max_students = int(input())
t_o = {'Physics': 2, 'Chemistry': 3, 'Mathematics': 4, 'Engineering': 5,
              'Biotech': 3}  # the order of the tests
class_list = {}  # {<dept> : [applicant list]}
for i in [6, 7, 8]:  # look at the departments in order of preference
    for row in sorted(app_list, # sort by dept, grade, first & last name
                      key=lambda x: (x[i], -int(x[t_o[x[i]]]), x[0], x[1])):
        class_list.setdefault(row[i], [])  # default class_list entry, empty list
        if len(class_list[row[i]]) < max_students:
            class_list[row[i]].append(row)  # assign applicant to the class
            app_list.remove(row)  # remove the applicant from the list

for dept in sorted(class_list.keys()):  # print the results
    print('\n' + dept)
    for student in sorted(class_list[dept],
                          key=lambda x: (-int(x[t_o[dept]]),  # dept test
                                         x[0], x[1])):  # first & last name
        print(student[0], student[1], student[t_o[dept]])

